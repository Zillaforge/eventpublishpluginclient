// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: eventpublish_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventPublishPluginInterfaceCRUDController_GetName_FullMethodName            = "/protos.EventPublishPluginInterfaceCRUDController/GetName"
	EventPublishPluginInterfaceCRUDController_GetVersion_FullMethodName         = "/protos.EventPublishPluginInterfaceCRUDController/GetVersion"
	EventPublishPluginInterfaceCRUDController_SetConfig_FullMethodName          = "/protos.EventPublishPluginInterfaceCRUDController/SetConfig"
	EventPublishPluginInterfaceCRUDController_CheckPluginVersion_FullMethodName = "/protos.EventPublishPluginInterfaceCRUDController/CheckPluginVersion"
	EventPublishPluginInterfaceCRUDController_InitPlugin_FullMethodName         = "/protos.EventPublishPluginInterfaceCRUDController/InitPlugin"
	EventPublishPluginInterfaceCRUDController_Reconcile_FullMethodName          = "/protos.EventPublishPluginInterfaceCRUDController/Reconcile"
	EventPublishPluginInterfaceCRUDController_CallGRPCRouter_FullMethodName     = "/protos.EventPublishPluginInterfaceCRUDController/CallGRPCRouter"
	EventPublishPluginInterfaceCRUDController_EnableHttpRouter_FullMethodName   = "/protos.EventPublishPluginInterfaceCRUDController/EnableHttpRouter"
	EventPublishPluginInterfaceCRUDController_GetRouter_FullMethodName          = "/protos.EventPublishPluginInterfaceCRUDController/GetRouter"
)

// EventPublishPluginInterfaceCRUDControllerClient is the client API for EventPublishPluginInterfaceCRUDController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventPublishPluginInterfaceCRUDControllerClient interface {
	GetName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNameResponse, error)
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error)
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckPluginVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckVersionResponse, error)
	InitPlugin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InitPluginResponse, error)
	Reconcile(ctx context.Context, in *ReconcileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CallGRPCRouter(ctx context.Context, in *RPCRouterRequest, opts ...grpc.CallOption) (*RPCRouterResponse, error)
	EnableHttpRouter(ctx context.Context, in *HttpRequestInfo, opts ...grpc.CallOption) (*HttpResponseInfo, error)
	GetRouter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRouterResponseList, error)
}

type eventPublishPluginInterfaceCRUDControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewEventPublishPluginInterfaceCRUDControllerClient(cc grpc.ClientConnInterface) EventPublishPluginInterfaceCRUDControllerClient {
	return &eventPublishPluginInterfaceCRUDControllerClient{cc}
}

func (c *eventPublishPluginInterfaceCRUDControllerClient) GetName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetNameResponse, error) {
	out := new(GetNameResponse)
	err := c.cc.Invoke(ctx, EventPublishPluginInterfaceCRUDController_GetName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPublishPluginInterfaceCRUDControllerClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, EventPublishPluginInterfaceCRUDController_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPublishPluginInterfaceCRUDControllerClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventPublishPluginInterfaceCRUDController_SetConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPublishPluginInterfaceCRUDControllerClient) CheckPluginVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckVersionResponse, error) {
	out := new(CheckVersionResponse)
	err := c.cc.Invoke(ctx, EventPublishPluginInterfaceCRUDController_CheckPluginVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPublishPluginInterfaceCRUDControllerClient) InitPlugin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InitPluginResponse, error) {
	out := new(InitPluginResponse)
	err := c.cc.Invoke(ctx, EventPublishPluginInterfaceCRUDController_InitPlugin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPublishPluginInterfaceCRUDControllerClient) Reconcile(ctx context.Context, in *ReconcileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EventPublishPluginInterfaceCRUDController_Reconcile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPublishPluginInterfaceCRUDControllerClient) CallGRPCRouter(ctx context.Context, in *RPCRouterRequest, opts ...grpc.CallOption) (*RPCRouterResponse, error) {
	out := new(RPCRouterResponse)
	err := c.cc.Invoke(ctx, EventPublishPluginInterfaceCRUDController_CallGRPCRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPublishPluginInterfaceCRUDControllerClient) EnableHttpRouter(ctx context.Context, in *HttpRequestInfo, opts ...grpc.CallOption) (*HttpResponseInfo, error) {
	out := new(HttpResponseInfo)
	err := c.cc.Invoke(ctx, EventPublishPluginInterfaceCRUDController_EnableHttpRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventPublishPluginInterfaceCRUDControllerClient) GetRouter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRouterResponseList, error) {
	out := new(GetRouterResponseList)
	err := c.cc.Invoke(ctx, EventPublishPluginInterfaceCRUDController_GetRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventPublishPluginInterfaceCRUDControllerServer is the server API for EventPublishPluginInterfaceCRUDController service.
// All implementations must embed UnimplementedEventPublishPluginInterfaceCRUDControllerServer
// for forward compatibility
type EventPublishPluginInterfaceCRUDControllerServer interface {
	GetName(context.Context, *emptypb.Empty) (*GetNameResponse, error)
	GetVersion(context.Context, *emptypb.Empty) (*GetVersionResponse, error)
	SetConfig(context.Context, *SetConfigRequest) (*emptypb.Empty, error)
	CheckPluginVersion(context.Context, *emptypb.Empty) (*CheckVersionResponse, error)
	InitPlugin(context.Context, *emptypb.Empty) (*InitPluginResponse, error)
	Reconcile(context.Context, *ReconcileRequest) (*emptypb.Empty, error)
	CallGRPCRouter(context.Context, *RPCRouterRequest) (*RPCRouterResponse, error)
	EnableHttpRouter(context.Context, *HttpRequestInfo) (*HttpResponseInfo, error)
	GetRouter(context.Context, *emptypb.Empty) (*GetRouterResponseList, error)
	mustEmbedUnimplementedEventPublishPluginInterfaceCRUDControllerServer()
}

// UnimplementedEventPublishPluginInterfaceCRUDControllerServer must be embedded to have forward compatible implementations.
type UnimplementedEventPublishPluginInterfaceCRUDControllerServer struct {
}

func (UnimplementedEventPublishPluginInterfaceCRUDControllerServer) GetName(context.Context, *emptypb.Empty) (*GetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedEventPublishPluginInterfaceCRUDControllerServer) GetVersion(context.Context, *emptypb.Empty) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedEventPublishPluginInterfaceCRUDControllerServer) SetConfig(context.Context, *SetConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedEventPublishPluginInterfaceCRUDControllerServer) CheckPluginVersion(context.Context, *emptypb.Empty) (*CheckVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPluginVersion not implemented")
}
func (UnimplementedEventPublishPluginInterfaceCRUDControllerServer) InitPlugin(context.Context, *emptypb.Empty) (*InitPluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitPlugin not implemented")
}
func (UnimplementedEventPublishPluginInterfaceCRUDControllerServer) Reconcile(context.Context, *ReconcileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reconcile not implemented")
}
func (UnimplementedEventPublishPluginInterfaceCRUDControllerServer) CallGRPCRouter(context.Context, *RPCRouterRequest) (*RPCRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallGRPCRouter not implemented")
}
func (UnimplementedEventPublishPluginInterfaceCRUDControllerServer) EnableHttpRouter(context.Context, *HttpRequestInfo) (*HttpResponseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableHttpRouter not implemented")
}
func (UnimplementedEventPublishPluginInterfaceCRUDControllerServer) GetRouter(context.Context, *emptypb.Empty) (*GetRouterResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouter not implemented")
}
func (UnimplementedEventPublishPluginInterfaceCRUDControllerServer) mustEmbedUnimplementedEventPublishPluginInterfaceCRUDControllerServer() {
}

// UnsafeEventPublishPluginInterfaceCRUDControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventPublishPluginInterfaceCRUDControllerServer will
// result in compilation errors.
type UnsafeEventPublishPluginInterfaceCRUDControllerServer interface {
	mustEmbedUnimplementedEventPublishPluginInterfaceCRUDControllerServer()
}

func RegisterEventPublishPluginInterfaceCRUDControllerServer(s grpc.ServiceRegistrar, srv EventPublishPluginInterfaceCRUDControllerServer) {
	s.RegisterService(&EventPublishPluginInterfaceCRUDController_ServiceDesc, srv)
}

func _EventPublishPluginInterfaceCRUDController_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventPublishPluginInterfaceCRUDController_GetName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).GetName(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPublishPluginInterfaceCRUDController_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventPublishPluginInterfaceCRUDController_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPublishPluginInterfaceCRUDController_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventPublishPluginInterfaceCRUDController_SetConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPublishPluginInterfaceCRUDController_CheckPluginVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).CheckPluginVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventPublishPluginInterfaceCRUDController_CheckPluginVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).CheckPluginVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPublishPluginInterfaceCRUDController_InitPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).InitPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventPublishPluginInterfaceCRUDController_InitPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).InitPlugin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPublishPluginInterfaceCRUDController_Reconcile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconcileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).Reconcile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventPublishPluginInterfaceCRUDController_Reconcile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).Reconcile(ctx, req.(*ReconcileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPublishPluginInterfaceCRUDController_CallGRPCRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RPCRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).CallGRPCRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventPublishPluginInterfaceCRUDController_CallGRPCRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).CallGRPCRouter(ctx, req.(*RPCRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPublishPluginInterfaceCRUDController_EnableHttpRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HttpRequestInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).EnableHttpRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventPublishPluginInterfaceCRUDController_EnableHttpRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).EnableHttpRouter(ctx, req.(*HttpRequestInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventPublishPluginInterfaceCRUDController_GetRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).GetRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EventPublishPluginInterfaceCRUDController_GetRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventPublishPluginInterfaceCRUDControllerServer).GetRouter(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// EventPublishPluginInterfaceCRUDController_ServiceDesc is the grpc.ServiceDesc for EventPublishPluginInterfaceCRUDController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventPublishPluginInterfaceCRUDController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.EventPublishPluginInterfaceCRUDController",
	HandlerType: (*EventPublishPluginInterfaceCRUDControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _EventPublishPluginInterfaceCRUDController_GetName_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _EventPublishPluginInterfaceCRUDController_GetVersion_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _EventPublishPluginInterfaceCRUDController_SetConfig_Handler,
		},
		{
			MethodName: "CheckPluginVersion",
			Handler:    _EventPublishPluginInterfaceCRUDController_CheckPluginVersion_Handler,
		},
		{
			MethodName: "InitPlugin",
			Handler:    _EventPublishPluginInterfaceCRUDController_InitPlugin_Handler,
		},
		{
			MethodName: "Reconcile",
			Handler:    _EventPublishPluginInterfaceCRUDController_Reconcile_Handler,
		},
		{
			MethodName: "CallGRPCRouter",
			Handler:    _EventPublishPluginInterfaceCRUDController_CallGRPCRouter_Handler,
		},
		{
			MethodName: "EnableHttpRouter",
			Handler:    _EventPublishPluginInterfaceCRUDController_EnableHttpRouter_Handler,
		},
		{
			MethodName: "GetRouter",
			Handler:    _EventPublishPluginInterfaceCRUDController_GetRouter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "eventpublish_service.proto",
}
